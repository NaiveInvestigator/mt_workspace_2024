<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Map with Bootstrap and Leaflet</title>
    <!-- Bootstrap CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="css/leaflet.css" />
    <style>
        #map { height: 400px; }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col">
                <h1>Simple Map with Bootstrap and Leaflet</h1>
                <div id="map"></div>
                <button onclick="addMarker(37.7749, -122.4194)">Add Marker</button>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS (optional) -->
    <script src="js/bootstrap.bundle.js"></script>
    <!-- Leaflet JS -->
    <script src="js/leaflet.js"></script>
    <script src="js/roslib.min.js"></script>
    <script src="js/umd.js"></script>
    <script>
        var map; // Declare map variable globally

        // Function to create the map
        function createMap() {
            // Create the map
            map = L.map('map').setView([0, 0], 2);

            // Add the tile layer (OpenStreetMap)
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
        }

        // Function to add markers based on coordinates array
        function addMarkers(markers) {
            // Loop through the array and add markers to the map
            for (var i = 0; i < markers.length; i++) {
		    L.marker(markers[i]).bindPopup(`x= ${markers[i][0]}<br>y= ${markers[i][1]}`).openPopup().addTo(map);
		console.log("test= ",markers[i][0],markers[i][1])
            }
        }


        // Function to add a new marker to the markers array and update the map
        function addMarker(lat, lng) {
            // Check if the coordinates already exist in the array
            var isDuplicate = markers.some(function(coord) {
                return coord[0] === lat && coord[1] === lng;
            });

            // If not a duplicate, add the new marker to the array
            if (!isDuplicate) {
                markers.push([lat, lng]);

                // Clear previous markers from the map
                map.eachLayer(function (layer) {
                    if (layer instanceof L.Marker) {
                        map.removeLayer(layer);
                    }
                });

                // Add updated markers to the map
                addMarkers(markers);
            } else {
                console.log("Coordinates already exist in the array.");
            }
        }

        // Function to subscribe to ROS topic and get coordinates
        function subscribeToROSTopic() {
            // Create a ROSLIB instance
            var ros = new ROSLIB.Ros();
            
            ros.on('error', function(error) {
                console.log(error);
            });

            // Find out exactly when we made a connection.
            ros.on('connection', function() {
                console.log('Connection made!');
            });

            ros.on('close', function() {
                console.log('Connection closed.');
            });

            // Define ROS bridge URL
            var rosBridgeUrl = 'ws://localhost:9090';

            // Connect to ROS Bridge
            ros.connect(rosBridgeUrl);

            // Subscribe to the topic
            var listener = new ROSLIB.Topic({
                ros: ros,
                name: '/gps', // Replace with your actual ROS topic name
                messageType: 'geometry_msgs/Point' // Adjust message type if needed
            });

            // Define callback function to handle received messages
            listener.subscribe(function(message) {
                // Extract coordinates from the received message
                var lat = message.x;
                var lng = message.y;
		console.log(lat)
		console.log(lng)

                // Add marker using extracted coordinates
                addMarker(lat, lng);
            });
        }

        // Call the functions to create the map and add initial markers
        createMap();

        // Initial markers array
        var markers = [
            [51.505, -0.09], // London
            [40.7128, -74.0060], // New York
            [34.0522,-118.2437] // Los Angeles
            // Add more coordinates as needed
        ];

        addMarkers(markers);
        subscribeToROSTopic();
	console.log('done')
    </script>

</body>
</html> 
