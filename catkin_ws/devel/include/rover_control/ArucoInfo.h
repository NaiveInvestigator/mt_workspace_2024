// Generated by gencpp from file rover_control/ArucoInfo.msg
// DO NOT EDIT!


#ifndef ROVER_CONTROL_MESSAGE_ARUCOINFO_H
#define ROVER_CONTROL_MESSAGE_ARUCOINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_control
{
template <class ContainerAllocator>
struct ArucoInfo_
{
  typedef ArucoInfo_<ContainerAllocator> Type;

  ArucoInfo_()
    : detected(false)
    , distance(0.0)
    , x(0)
    , y(0)
    , id(0)  {
    }
  ArucoInfo_(const ContainerAllocator& _alloc)
    : detected(false)
    , distance(0.0)
    , x(0)
    , y(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef double _distance_type;
  _distance_type distance;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::rover_control::ArucoInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_control::ArucoInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ArucoInfo_

typedef ::rover_control::ArucoInfo_<std::allocator<void> > ArucoInfo;

typedef boost::shared_ptr< ::rover_control::ArucoInfo > ArucoInfoPtr;
typedef boost::shared_ptr< ::rover_control::ArucoInfo const> ArucoInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_control::ArucoInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_control::ArucoInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_control::ArucoInfo_<ContainerAllocator1> & lhs, const ::rover_control::ArucoInfo_<ContainerAllocator2> & rhs)
{
  return lhs.detected == rhs.detected &&
    lhs.distance == rhs.distance &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_control::ArucoInfo_<ContainerAllocator1> & lhs, const ::rover_control::ArucoInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rover_control::ArucoInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_control::ArucoInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_control::ArucoInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_control::ArucoInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_control::ArucoInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_control::ArucoInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_control::ArucoInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fc9308a0b3197eeb33075d3be520061";
  }

  static const char* value(const ::rover_control::ArucoInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fc9308a0b3197eeULL;
  static const uint64_t static_value2 = 0xb33075d3be520061ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_control::ArucoInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_control/ArucoInfo";
  }

  static const char* value(const ::rover_control::ArucoInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_control::ArucoInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool detected\n"
"float64 distance\n"
"int32 x\n"
"int32 y\n"
"int32 id\n"
;
  }

  static const char* value(const ::rover_control::ArucoInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_control::ArucoInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected);
      stream.next(m.distance);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArucoInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_control::ArucoInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_control::ArucoInfo_<ContainerAllocator>& v)
  {
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_CONTROL_MESSAGE_ARUCOINFO_H
