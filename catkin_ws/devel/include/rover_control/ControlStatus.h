// Generated by gencpp from file rover_control/ControlStatus.msg
// DO NOT EDIT!


#ifndef ROVER_CONTROL_MESSAGE_CONTROLSTATUS_H
#define ROVER_CONTROL_MESSAGE_CONTROLSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_control
{
template <class ContainerAllocator>
struct ControlStatus_
{
  typedef ControlStatus_<ContainerAllocator> Type;

  ControlStatus_()
    : left_speed(0)
    , right_speed(0)
    , act1_speed(0)
    , act2_speed(0)
    , act3_speed(0)
    , claw_spin_speed(0)
    , base_speed(0)
    , claw_grip_speed(0)  {
    }
  ControlStatus_(const ContainerAllocator& _alloc)
    : left_speed(0)
    , right_speed(0)
    , act1_speed(0)
    , act2_speed(0)
    , act3_speed(0)
    , claw_spin_speed(0)
    , base_speed(0)
    , claw_grip_speed(0)  {
  (void)_alloc;
    }



   typedef int16_t _left_speed_type;
  _left_speed_type left_speed;

   typedef int16_t _right_speed_type;
  _right_speed_type right_speed;

   typedef int16_t _act1_speed_type;
  _act1_speed_type act1_speed;

   typedef int16_t _act2_speed_type;
  _act2_speed_type act2_speed;

   typedef int16_t _act3_speed_type;
  _act3_speed_type act3_speed;

   typedef int16_t _claw_spin_speed_type;
  _claw_spin_speed_type claw_spin_speed;

   typedef int16_t _base_speed_type;
  _base_speed_type base_speed;

   typedef int16_t _claw_grip_speed_type;
  _claw_grip_speed_type claw_grip_speed;





  typedef boost::shared_ptr< ::rover_control::ControlStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_control::ControlStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ControlStatus_

typedef ::rover_control::ControlStatus_<std::allocator<void> > ControlStatus;

typedef boost::shared_ptr< ::rover_control::ControlStatus > ControlStatusPtr;
typedef boost::shared_ptr< ::rover_control::ControlStatus const> ControlStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_control::ControlStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_control::ControlStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_control::ControlStatus_<ContainerAllocator1> & lhs, const ::rover_control::ControlStatus_<ContainerAllocator2> & rhs)
{
  return lhs.left_speed == rhs.left_speed &&
    lhs.right_speed == rhs.right_speed &&
    lhs.act1_speed == rhs.act1_speed &&
    lhs.act2_speed == rhs.act2_speed &&
    lhs.act3_speed == rhs.act3_speed &&
    lhs.claw_spin_speed == rhs.claw_spin_speed &&
    lhs.base_speed == rhs.base_speed &&
    lhs.claw_grip_speed == rhs.claw_grip_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_control::ControlStatus_<ContainerAllocator1> & lhs, const ::rover_control::ControlStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rover_control::ControlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_control::ControlStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_control::ControlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_control::ControlStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_control::ControlStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_control::ControlStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_control::ControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69100b553df4a1337bbe8ccb7c455a89";
  }

  static const char* value(const ::rover_control::ControlStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69100b553df4a133ULL;
  static const uint64_t static_value2 = 0x7bbe8ccb7c455a89ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_control::ControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_control/ControlStatus";
  }

  static const char* value(const ::rover_control::ControlStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_control::ControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 left_speed\n"
"int16 right_speed\n"
"int16 act1_speed\n"
"int16 act2_speed\n"
"int16 act3_speed\n"
"int16 claw_spin_speed\n"
"int16 base_speed\n"
"int16 claw_grip_speed\n"
;
  }

  static const char* value(const ::rover_control::ControlStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_control::ControlStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_speed);
      stream.next(m.right_speed);
      stream.next(m.act1_speed);
      stream.next(m.act2_speed);
      stream.next(m.act3_speed);
      stream.next(m.claw_spin_speed);
      stream.next(m.base_speed);
      stream.next(m.claw_grip_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_control::ControlStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_control::ControlStatus_<ContainerAllocator>& v)
  {
    s << indent << "left_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_speed);
    s << indent << "right_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_speed);
    s << indent << "act1_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.act1_speed);
    s << indent << "act2_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.act2_speed);
    s << indent << "act3_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.act3_speed);
    s << indent << "claw_spin_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.claw_spin_speed);
    s << indent << "base_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_speed);
    s << indent << "claw_grip_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.claw_grip_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_CONTROL_MESSAGE_CONTROLSTATUS_H
